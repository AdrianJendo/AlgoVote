#pragma version 5
// check if the app is being created
// if so save creator
int 0
txn ApplicationID // check if the ApplicationID exists (if doesn't exist it equals zero)
==
bz not_creation // branch to target if ApplicationID is zero (bz -> branch if zero)

// > 5 args must be used on creation
txn NumAppArgs
int 5
>
bz failed // check if number of app args is more than 5 and branch if less than or equal to 5

// setting global variables
// set timestamps (UTC time)
byte "VoteBegin"
txna ApplicationArgs 0 // access the first argument in the transaction
btoi // converts big endian bytes to uint64
app_global_put // put the first application argument into global storage with "VoteBegin" key
byte "VoteEnd"
txna ApplicationArgs 1 // put the 2nd application argument into global storage with "VoteEnd" key
btoi
app_global_put
byte "AssetId"
txna ApplicationArgs 2 // put the 3rd argument into global storage as "AssetID"
btoi
app_global_put
byte "NumVoters"
txna ApplicationArgs 3
btoi
app_global_put
byte "VoteTitle"
txna ApplicationArgs 4
app_global_put

// loop from index 5 -> args.length-1
// init loop var
int 5 // start at 6th argument (index 5)
loop:
dup // txnas pops top of stack so duplicate the value
txnas ApplicationArgs // get the candidate using top of stack value
int 0 // set candidate votes to 0
app_global_put // store 0 votes in global state
int 1 // increment counter by 1
+
// check upper bound
dup // < operator pops off stack so duplicate the value for next iteration
txn NumAppArgs // loop over all candidates
<
bnz loop
b success

not_creation: // branch for any call that is not contract creation
// check NoOp
txn OnCompletion
int NoOp
==
bnz handle_noop

// check if optin (register)
txn OnCompletion
int OptIn
==
bnz handle_optin

// check if closeout
txn OnCompletion
int CloseOut
==
bnz handle_closeout

// check if update
txn OnCompletion
int UpdateApplication
==
bnz handle_updateapp

// check deletion
txn OnCompletion
int DeleteApplication
==
bnz handle_deleteapp


// Handle NoOp (vote)
handle_noop:
txna ApplicationArgs 0
byte "vote" // check if the first argument to the transaction is "vote"
==
bz failed
//verify in voting timestamps
global LatestTimestamp
byte "VoteBegin"
app_global_get // check that timestamp of last block is after votebegin
>=
global LatestTimestamp
byte "VoteEnd"
app_global_get // and check that timestamp of last block is before voteEnd
<=
&&
bz failed // if one of the above conditions is false, branch to failed
// Check that the account has opted in
// account offset (0 == sender, 1 == txn.accounts[0], 2 == txn.accounts[1], etc..)
int 0 // offset of 0 corresponds to sender [A]
txn ApplicationID // AppId [B]
app_opted_in // check if account A (0 -> sender) opted in to application B (specified by AppId)
bz failed
// two transactions
global GroupSize
int 2
==
bz failed
// second txn is an asset transfer
gtxn 1 TypeEnum
int 4 // 4 corresponds to AssetTransfer operation
==
bz failed
// creator receiving the vote token
global CreatorAddress
gtxn 1 AssetReceiver
==
bz failed
// verify the proper token is being spent
gtxn 1 XferAsset
// not hard-coded
byte "AssetId"
app_global_get
==
bz failed
// check local to see if they have voted
int 0 // sender
txn ApplicationID
byte "voted"
app_local_get_ex // put voted variable to top of stack
// if voted skip incrementing count and return success
bnz success
// voting for candidate
// read existing vote candidate in global state and increment vote
int 0
txna ApplicationArgs 1 // load candidate onto top of stack
app_global_get_ex // read from application A (0) global state key B (candidate)
bnz increment_existing 
int 0 // add zero (current number of votes of candidate)

increment_existing:
// check if they have the vote token & increment votes by their balance
int 0 // offset 0 for sender
byte "AssetId" // OR int 0 (first index of foreign asset args)
app_global_get
asset_holding_get AssetBalance // get AssetBalance
bz failed // asset_holding_get AssetBalance first pushes a 0 or 1 where 0 means the asset balance was not found and 1 means an asset balance was found
// does voter have at least 1 vote token
dup // duplicate the balance so it doesn't get popped when we check the balance
int 1
>=
bz failed
+ // increment count by asset balance
store 1
txna ApplicationArgs 1
load 1
app_global_put // store number of votes in global state
// store the voters choice in local state
int 0 // sender
byte "voted"
txna ApplicationArgs 1
app_local_put // put the voters candidate in local storage
b success

// Handle OptIn (register)
handle_optin:
txna ApplicationArgs 0
byte "register" // check if the first argument to the transaction is "register"
==
bz failed
global LatestTimestamp
byte "VoteBegin"
app_global_get
<=
bz failed
b success

// Handle CloseOut
handle_closeout:
b failed // don't let anyone clear local state

handle_updateapp:
global CreatorAddress
txn Sender
== // Check if the "Creator" is equal to the sender of the current transaction
bz failed // Fail if "Creator" is not sender
b success

handle_deleteapp:
global CreatorAddress
txn Sender
== // Check if the "Creator" is equal to the sender of the current transaction
bz failed // Fail if "Creator" is not sender
b success

failed:
int 0
return

success:
int 1
return // Returns the value on the top of the stack when the program terminates, for successful creation of smart contract, return 1